var mdbm=function(e){"use strict";function n(){libByName("Object"),libByName("mdbm.Type")}function i(e){return libByName("mdbm.Type").entries().find(n=>n.field("Name")===e)}function t(e){return void 0!==i(e)}function s(e){return!t(e)}const o={isMissing:function(e){return"Type '"+e+"' does not exist!"}};function c(e,n){e.field("hasTypes").map(e=>e.field("Name")).includes(n)||e.link("hasTypes",i(n))}const r={open:function(e){e.set("hasTypes",i("Object"))},post:function(e){return c(e,"Object"),c(e,e.field("Name")),e}};const f={check:function(e){if(s(e))throw o.isMissing(e)},create:function(e,n){if(t(e))throw o.existsAlready(e);return function(e,n){const i=libByName("mdbm.Type").create({});i.set("Name",e),void 0===n?r.open(i):i.set("hasTypes",n.field("hasTypes"));return r.post(i),i}(e,n)},isMissing:s,messages:o,onCreate:r},u={post:function(e){n(),f.isMissing(e.title)&&message("Type '"+e.title+"' is not defined!")}};const a={onOpen:u};const m={onCreate:{open:function(e,n){if(f.isMissing(n))throw f.messages.isMissing(n)},post:function(e){}}};return e.library=a,e.object=m,e.type=f,e}({});
