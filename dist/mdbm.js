var mdbm=function(e){"use strict";function n(){libByName("Object"),libByName("mdbm.Type")}function t(e){return libByName("mdbm.Type").entries().find(n=>n.field("Name")===e)}function s(e){return void 0!==t(e)}function i(e){return!s(e)}const o={alreadyExists:function(e){return"Type '"+e+"' does already exist!"},isMissing:function(e){return"Type '"+e+"' does not exist!"}};function c(e,n){e.field("hasTypes").map(e=>e.field("Name")).includes(n)||e.link("hasTypes",t(n))}const r={open:function(e){e.set("hasTypes",t("Object"))},post:function(e){return c(e,"Object"),c(e,e.field("Name")),e}};const a={check:function(e){if(i(e))throw o.isMissing(e)},create:function(e,n){if(s(e))throw o.existsAlready(e);return function(e,n){const t=libByName("mdbm.Type").create({});t.set("Name",e),void 0===n?r.open(t):t.set("hasTypes",n.field("hasTypes"));return r.post(t),t}(e,n)},emptyIds:function(e){const n=t(e).field("hasTypes").map(e=>[e.field("Name"),null]);return Object.fromEntries(n)},isMissing:i,messages:o,onCreate:r},f={post:function(e){n(),a.isMissing(e.title)&&message("Type '"+e.title+"' is not defined!")}};const u={onOpen:f};const m={open:function(e,n){const t=n.title;if(a.isMissing(t))throw n.show(),a.messages.isMissing(t);e.set("mdbm.Type",t)},post:function(e){!function(e){const n=a.emptyIds(function(e){return e.field("mdbm.Type")}(e));e.set("mdbm.Ids",JSON.stringify(n,null,2))}(e)}};const d={create:function(e){const n=libByName(e).create({});m.open(n,libByName(e)),m.post(n),n.show()},onCreate:m};return e.library=u,e.object=d,e.type=a,e}({});
