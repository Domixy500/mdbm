var mdbm=function(e){"use strict";function n(){libByName("Object"),libByName("mdbm.Type")}function s(e){return libByName("mdbm.Type").entries().find(n=>n.field("Name")===e)}function i(e){return void 0!==s(e)}function t(e){return!i(e)}const o={isMissing:function(e){return"Type '"+e+"' does not exist!"}};function c(e,n){e.field("hasTypes").map(e=>e.field("Name")).includes(n)||e.link("hasTypes",s(n))}const r={open:function(e){e.set("hasTypes",s("Object"))},post:function(e){return c(e,"Object"),c(e,e.field("Name")),e}};const a={check:function(e){if(t(e))throw o.isMissing(e)},create:function(e,n){if(i(e))throw o.existsAlready(e);return function(e,n){const s=libByName("mdbm.Type").create({});s.set("Name",e),void 0===n?r.open(s):s.set("hasTypes",n.field("hasTypes"));return r.post(s),s}(e,n)},isMissing:t,messages:o,onCreate:r},u={post:function(e){n(),a.isMissing(e.title)&&message("Type '"+e.title+"' is not defined!")}};const f={onOpen:u};const m={onCreate:{open:function(e,n){a.isMissing(n)&&(message(a.messages.isMissing(n)),cancel(),exit())},post:function(e){}}};return e.library=f,e.object=m,e.type=a,e}({});
