{"version":3,"file":"mdbm-debug.js","sources":["../src/app/index.js","../src/mdbm/property/type.js","../src/mdbm/property/value.js","../src/mdbm/property/valueAsString.js"],"sourcesContent":["/*jslint beta*/\n/*global\n    log\n    message\n*/\n\nconst notify = function (text) {\n    message(text);\n    log(text);\n};\n\nexport {\n    notify\n};\n","/*jslint beta*/\n/*global*/\n\nfunction type(e) {\n    return e.field(\"Type\");\n}\n\nexport {\n    type\n};\n","/*jslint beta*/\n/*global*/\n\nimport {type} from \"./type\";\n\nfunction value(e, newValue) {\n    const propertyType = type(e);\n    if (newValue !== undefined) {\n        e.set(propertyType, newValue);\n    }\n    return e.field(\n        propertyType\n    );\n}\n\nexport {\n    value\n};\n","/*jslint beta*/\n/*global*/\n\nimport {type} from \"./type\";\nimport {value} from \"./value\";\n\nconst stringConverter = {\n    multiLine: value,\n    singleLine: value\n};\n\nfunction hasConverter(key) {\n    return Object.keys(\n        stringConverter\n    ).includes(key);\n}\n\nfunction valueAsString(e) {\n    const propertyType = type(e);\n\n    return (\n        hasConverter(propertyType)\n        ? stringConverter[propertyType](e)\n        : propertyType\n    );\n}\n\nexport {\n    valueAsString\n};\n"],"names":["notify","text","message","log","type","e","field","value","newValue","propertyType","undefined","set","stringConverter","multiLine","singleLine","hasConverter","key","Object","keys","includes","valueAsString"],"mappings":";;IAMK,MAACA,SAAS,SAAUC;QACrBC,QAAQD;QACRE,IAAIF;AACR;ICNA,SAASG,KAAKC;QACV,OAAOA,EAAEC,MAAM;AACnB;ICAA,SAASC,MAAMF,GAAGG;QACd,MAAMC,eAAeL,KAAKC;QAC1B,IAAIG,aAAaE,WAAW;YACxBL,EAAEM,IAAIF,cAAcD;AACxB;QACA,OAAOH,EAAEC,MACLG;AAER;ICPA,MAAMG,kBAAkB;QACpBC,WAAWN;QACXO,YAAYP;;IAGhB,SAASQ,aAAaC;QAClB,OAAOC,OAAOC,KACVN,iBACFO,SAASH;AACf;IAEA,SAASI,cAAcf;QACnB,MAAMI,eAAeL,KAAKC;QAE1B,OACIU,aAAaN,gBACXG,gBAAgBH,cAAcJ,KAC9BI;AAEV;;;;"}