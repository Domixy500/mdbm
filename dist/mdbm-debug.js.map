{"version":3,"file":"mdbm-debug.js","sources":["../src/library/getLibrary.js","../src/library/createEntry.js","../src/library/checkAccess.js","../src/type/entries.js","../src/type/find.js","../src/type/exists.js","../src/type/isMissing.js","../src/library/onOpen.js","../src/library/index.js","../src/common/json.js","../src/common/index.js","../src/type/messages.js","../src/type/check.js","../src/type/addType.js","../src/type/onCreate.js","../src/type/create.js","../src/type/hasTypesNames.js","../src/type/emptyIds.js","../src/type/index.js","../src/object/typeName.js","../src/object/ids.js","../src/object/displayName.js","../src/object/onSave.js","../src/object/onCreate.js","../src/object/create.js","../src/object/index.js"],"sourcesContent":["/*jslint beta*/\n/*global\n    libByName\n*/\n\nfunction getLibrary(libraryName) {\n    return libByName(libraryName);\n}\n\nexport {\n    getLibrary\n};\n","/*jslint beta*/\n/*global*/\n\nimport {getLibrary} from \"./getLibrary\";\n\nfunction createEntry(libraryName) {\n    return getLibrary(libraryName).create({});\n}\n\nexport {\n    createEntry\n};\n","/*jslint beta*/\n/*global*/\n\nimport {getLibrary} from \"./getLibrary\";\n\nfunction checkAccess() {\n    getLibrary(\"Object\");\n    getLibrary(\"mdbm.Type\");\n}\n\nexport {\n    checkAccess\n};\n","/*jslint beta*/\n/*global\n    libByName\n*/\n\nfunction entries() {\n    return libByName(\"mdbm.Type\").entries();\n}\n\nexport {\n    entries\n};\n","/*jslint beta*/\n/*global\n    libByName\n*/\n\nimport {entries} from \"./entries\";\n\nfunction find(typeName) {\n    return entries().find(\n        (e) => e.field(\"Name\") === typeName\n    );\n}\n\nexport {\n    find\n};\n","/*jslint beta*/\n/*global*/\n\nimport {find} from \"./find\";\n\nfunction exists(typeName) {\n    return find(typeName) !== undefined;\n}\n\nexport {\n    exists\n};\n","/*jslint beta*/\n/*global*/\n\nimport {exists} from \"./exists\";\n\nfunction isMissing(name) {\n    return !exists(name);\n}\n\nexport {\n    isMissing\n};\n","/*jslint beta*/\n/*global\n    message\n*/\n\nimport {checkAccess} from \"./checkAccess\";\nimport {isMissing} from \"@type/isMissing\";\n\nconst onOpen = {\n    post\n};\n\nfunction post(library) {\n    checkAccess();\n    if (isMissing(library.title)) {\n        message(\"Type '\" + library.title + \"' is not defined!\");\n    }\n}\n\nexport {\n    onOpen\n};\n","/*jslint beta*/\n/*global*/\n\nimport {createEntry} from \"./createEntry\";\nimport {getLibrary} from \"./getLibrary\";\nimport {onOpen} from \"./onOpen\";\n\nconst library = {\n    createEntry,\n    get: getLibrary,\n    onOpen\n};\n\nexport {\n    library\n};\n","/*jslint beta*/\n/*global*/\n\nconst json = {\n    parse,\n    stringify\n};\n\nfunction parse(jsonString) {\n    return JSON.parse(jsonString);\n}\n\nfunction stringify(object) {\n    return JSON.stringify(object, null, 2);\n}\n\nexport {\n    json\n};\n","/*jslint beta*/\n/*global*/\n\nimport {json} from \"./json\";\n\nconst common = {\n    json\n};\n\nexport {\n    common\n};\n","/*jslint beta*/\n/*global*/\n\nconst messages = {\n    alreadyExists,\n    isMissing\n};\n\nfunction alreadyExists(x) {\n    return \"Type '\" + x + \"' does already exist!\";\n}\n\nfunction isMissing(x) {\n    return \"Type '\" + x + \"' does not exist!\";\n}\n\nexport {\n    messages\n};\n","/*jslint beta*/\n/*global*/\n\nimport {isMissing} from \"./isMissing\";\nimport {messages} from \"./messages\";\n\nfunction check(typeName) {\n    if (isMissing(typeName)) {\n        throw messages.isMissing(typeName);\n    }\n}\n\nexport {\n    check\n};\n","/*jslint beta*/\n/*global*/\n\nimport {find} from \"./find\";\n\nconst hasTypesField = \"hasTypes\";\n\nfunction addType(typeEntry, typeName) {\n    const hasTypeNames = hasTypes(typeEntry).map(\n        (e) => e.field(\"Name\")\n    );\n    if (!hasTypeNames.includes(typeName)) {\n        typeEntry.link(\n            hasTypesField,\n            find(typeName)\n        );\n    }\n}\n\nfunction hasTypes(typeEntry) {\n    return typeEntry.field(hasTypesField);\n}\n\nexport {\n    addType\n};\n","/*jslint beta*/\n/*global*/\n\nimport {addType} from \"./addType\";\nimport {find} from \"./find\";\n\nconst onCreate = {\n    open,\n    post\n};\n\nfunction open(e) {\n    e.set(\n        \"hasTypes\",\n        find(\"Object\")\n    );\n}\n\nfunction post(e) {\n    addType(e, \"Object\");\n    addType(e, e.field(\"Name\"));\n    return e;\n}\n\nexport {\n    onCreate\n};\n","/*jslint beta*/\n/*global\n    libByName\n*/\n\nimport {exists} from \"./exists\";\nimport {library} from \"@library\";\nimport {messages} from \"./messages\";\nimport {onCreate} from \"./onCreate\";\n\nfunction create(typeName, baseType) {\n    if (exists(typeName)) {\n        throw messages.existsAlready(typeName);\n    }\n    return createType(typeName, baseType);\n}\n\nfunction createType(typeName, baseType) {\n    const typeEntry = library.createEntry(\"mdbm.Type\");\n    typeEntry.set(\"Name\", typeName);\n    if (baseType === undefined) {\n        onCreate.open(typeEntry);\n    } else {\n        typeEntry.set(\n            \"hasTypes\",\n            baseType.field(\"hasTypes\")\n        );\n    }\n    onCreate.post(typeEntry);\n    return typeEntry;\n}\n\nexport {\n    create\n};\n","/*jslint beta*/\n/*global*/\n\nimport {find} from \"./find\";\n\nfunction hasTypesNames(typeName) {\n    const hasTypes = find(typeName).field(\"hasTypes\");\n    return hasTypes.map(\n        (x) => x.field(\"Name\")\n    );\n}\n\nexport {\n    hasTypesNames\n};\n","/*jslint beta*/\n/*global*/\n\nimport {hasTypesNames} from \"./hasTypesNames\";\n\nfunction addEmptyId(entryIds, name) {\n    entryIds[name] = null;\n    return entryIds;\n}\n\nfunction emptyIds(typeName) {\n    return hasTypesNames(typeName).reduce(\n        addEmptyId,\n        Object.create(null)\n    );\n}\n\nexport {\n    emptyIds\n};\n","/*jslint beta*/\n/*global*/\n\nimport {check} from \"./check\";\nimport {create} from \"./create\";\nimport {entries} from \"./entries\";\nimport {exists} from \"./exists\";\nimport {find} from \"./find\";\nimport {emptyIds} from \"./emptyIds\";\nimport {isMissing} from \"./isMissing\";\nimport {messages} from \"./messages.js\";\nimport {onCreate} from \"./onCreate.js\";\n\nconst type = {\n    check,\n    create,\n    emptyIds,\n    isMissing,\n    messages,\n    onCreate\n};\n\nexport {\n    type\n};\n","/*jslint beta*/\n/*global*/\n\nfunction typeName(e) {\n    return e.field(\"mdbm.Type\");\n}\n\nexport {\n    typeName\n};\n","/*jslint beta*/\n/*global*/\n\nimport {common} from \"@common\";\nimport {library} from \"@library\";\nimport {type} from \"@type\";\nimport {typeName} from \"./typeName\";\n\nconst ids = {\n    addMissing,\n    createMissing,\n    get,\n    getAll,\n    set,\n    setAll,\n    setEmpty,\n    setSelf\n};\n\nconst idsField = \"mdbm.Ids\";\n\nfunction addMissing(e) {\n    const entryIds = Object.assign(\n        Object.create(null),\n        type.emptyIds(typeName(e)),\n        getAll(e)\n    );\n    setAll(e, entryIds);\n}\n\nfunction createMissing(e) {\n    const entryIds = getAll(e);\n    const libNames = Object.keys(entryIds);\n    libNames.forEach(addMissingEntry);\n    setAll(e, entryIds);\n\n    function addMissingEntry(libraryName) {\n        if (entryIds[libraryName] === null) {\n            entryIds[libraryName] = library.createEntry(libraryName).id;\n        }\n    }\n}\n\nfunction get(e, libName) {\n    return getAll(e)[libName];\n}\n\nfunction getAll(e) {\n    return common.json.parse(\n        e.field(idsField)\n    );\n}\n\nfunction set(e, libName, value) {\n    const entryIds = getAll(e);\n    entryIds[libName] = value;\n    setAll(e, entryIds);\n}\n\nfunction setAll(e, entryIds) {\n    e.set(\n        idsField,\n        common.json.stringify(entryIds)\n    );\n}\n\nfunction setEmpty(e) {\n    const entryIds = type.emptyIds(typeName(e));\n    setAll(e, entryIds);\n}\n\nfunction setSelf(e) {\n    set(e, typeName(e), e.id);\n}\n\nexport {\n    ids\n};\n","/*jslint beta*/\n/*global*/\n\nimport {type} from \"@type\";\n\nfunction displayName(e) {\n    const template = type.fromObjectEntry(e).field(\"DisplayNamePattern\");\n    const value = template.replace(\n        /\\$\\{(.*?)\\}/g,\n        (ignore, key) => getVal(e, key)\n    );\n    e.set(\"DisplayName\", value);\n    return value;\n}\n\nfunction getVal(e, key) {\n    return e.field(key);\n}\n\nexport {\n    displayName\n};\n","/*jslint beta*/\n/*global*/\n\nimport {ids} from \"./ids\";\nimport {displayName} from \"./displayName\";\n\nconst onSave = {\n    open,\n    post\n};\n\nfunction open(e, activeLibrary) {\n    // do nothing\n    message(\"nothing\");\n}\n\nfunction post(e) {\n    ids.addMissing(e);\n    ids.createMissing(e);\n    message(displayName(e));\n}\n\nexport {\n    onSave\n};\n","/*jslint beta*/\n/*global*/\n\nimport {onSave} from \"./onSave\";\nimport {type} from \"@type\";\nimport {ids} from \"./ids\";\n\nconst onCreate = {\n    open,\n    post\n};\n\nfunction open(e, activeLibrary) {\n    const libraryName = activeLibrary.title;\n    if (type.isMissing(libraryName)) {\n        activeLibrary.show();\n        throw type.messages.isMissing(libraryName);\n    }\n    e.set(\"mdbm.Type\", libraryName);\n    ids.setEmpty(e);\n}\n\nfunction post(e) {\n    ids.setSelf(e);\n    onSave.post(e);\n}\n\nexport {\n    onCreate\n};\n","/*jslint beta*/\n/*global*/\n\nimport {library} from \"@library\";\nimport {onCreate} from \"./onCreate\";\n\nfunction create(libraryName) {\n    const object = library.createEntry(libraryName);\n    onCreate.open(\n        object,\n        library.get(libraryName)\n    );\n    onCreate.post(object);\n    object.show();\n}\n\nexport {\n    create\n};\n","/*jslint beta*/\n/*global*/\n\nimport {create} from \"./create\";\nimport {displayName} from \"./displayName\";\nimport {onCreate} from \"./onCreate\";\n\nconst object = {\n    create,\n    displayName,\n    onCreate\n};\n\nexport {\n    object\n};\n"],"names":["getLibrary","libraryName","libByName","createEntry","create","checkAccess","entries","find","typeName","e","field","exists","undefined","isMissing","name","onOpen","post","library","title","message","get","json","parse","stringify","jsonString","JSON","object","common","messages","alreadyExists","x","check","hasTypesField","addType","typeEntry","hasTypeNames","hasTypes","map","includes","link","onCreate","open","set","baseType","existsAlready","createType","hasTypesNames","addEmptyId","entryIds","emptyIds","reduce","Object","type","ids","addMissing","createMissing","getAll","setAll","setEmpty","setSelf","idsField","assign","libNames","keys","forEach","addMissingEntry","id","libName","value","displayName","template","fromObjectEntry","replace","ignore","key","getVal","onSave","activeLibrary","show"],"mappings":"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"}