{"version":3,"file":"mdbm-debug.js","sources":["../src/app/index.js","../src/mdbm/object/create/fromPrototype.js","../src/mdbm/object/create/index.js","../src/mdbm/object/displayName.js","../src/mdbm/object/index.js","../src/mdbm/property/type.js","../src/mdbm/property/value.js","../src/mdbm/property/valueAsString.js","../src/mdbm/property/fromEntry.js","../src/mdbm/property/index.js"],"sourcesContent":["/*jslint beta*/\n/*global\n    log\n    message\n*/\n\nfunction notify(text) {\n    message(text);\n    log(text);\n};\n\nfunction createEntry(libraryName) {\n    return libByName(\n        libraryName\n    ).create({});\n}\n\nexport {\n    createEntry,\n    notify\n};\n","/*jslint beta*/\n/*global*/\n\nimport {createEntry} from \"@app\";\n\nfunction addAttribute(e, attr) {\n    const property = libByName(\"Property\").create({});\n    property.set(\"Label\", attr.field(\"Label\"));\n    property.set(\"Type\", attr.field(\"Type\"));\n    property.set(\"Order\", attr.field(\"Order\"));\n    property.link(\"Object\", e);\n}\n\nfunction addType(object, prototype) {\n    const basedOn = prototype.field(\"basedOn\");\n    object.link(\"Type\", prototype);\n    if (basedOn.length === 1) {\n        addType(object, basedOn[0]);\n    }\n}\n\nfunction fromPrototype(prototype) {\n    const attributes = prototype.field(\"Attributes\");\n    const object = createEntry(\"Object\");\n    addType(object, prototype);\n    setPrototype(object, prototype);\n    attributes.forEach(\n        (x) => addAttribute(object, x)\n        );\n    \n    return object;\n}\n\nfunction setPrototype(object, prototype) {\n    object.set(\"Prototype\", [prototype]);\n}\n\nexport {\n    fromPrototype\n};\n","/*jslint beta*/\n/*global*/\n\nimport {fromPrototype} from \"./fromPrototype\";\n\nconst create = {\n    fromPrototype\n};\n\nexport {\n    create\n};\n","function displayName(e) {\n    const pattern = e.field(\"DisplayNamePattern\");\n    const properties = e.linksFrom(\"Property\", \"Object\");\n    \n    function replacer(_, fieldName) {\n        const property = properties.filter(\n            (x) => x.field(\"Label\") === fieldName\n        )[0];\n        return property.field(\"Value\");\n    }\n\n    return pattern.replace(\n        /\\$\\{([^}]+)\\}/g,\n        replacer\n    );\n}\n\nexport {\n    displayName\n};\n","/*jslint beta*/\n/*global*/\n\nimport {create} from \"./create\";\nimport {displayName} from \"./displayName.js\";\n\nconst object = {\n    displayName,\n    create\n};\n\nexport {\n    object\n};\n","/*jslint beta*/\n/*global*/\n\nfunction type(e) {\n    return e.field(\"Type\");\n}\n\nexport {\n    type\n};\n","/*jslint beta*/\n/*global*/\n\nimport {type} from \"./type\";\n\nfunction value(e, newValue) {\n    const propertyType = type(e);\n    if (newValue !== undefined) {\n        e.set(propertyType, newValue);\n    }\n    return e.field(\n        propertyType\n    );\n}\n\nexport {\n    value\n};\n","/*jslint beta*/\n/*global*/\n\nimport {type} from \"./type\";\nimport {value} from \"./value\";\n\nconst stringConverter = {\n    multiLine: value,\n    singleLine: value\n};\n\nfunction hasConverter(key) {\n    return Object.keys(\n        stringConverter\n    ).includes(key);\n}\n\nfunction valueAsString(e) {\n    const propertyType = type(e);\n\n    return (\n        hasConverter(propertyType)\n        ? stringConverter[propertyType](e)\n        : propertyType\n    );\n}\n\nexport {\n    valueAsString\n};\n","/*jslint beta*/\n/*global*/\n\nimport {type} from \"./type.js\";\nimport {value} from \"./value.js\";\nimport {valueAsString} from \"./valueAsString.js\";\n\nfunction fromEntry(e) {\n    const property = {\n        type: () => type(e),\n        value: (newValue) => value(e, newValue),\n        valueAsString: () => valueAsString(e)\n    }\n    \n    return Object.freeze({\n        property\n    });\n}\n\nexport {\n    fromEntry\n};\n","/*jslint beta*/\n/*global*/\n\nimport {fromEntry} from \"./fromEntry\";\nimport {type} from \"./type\";\nimport {value} from \"./value\";\nimport {valueAsString} from \"./valueAsString\";\n\nconst property = {\n    fromEntry,\n    type,\n    value,\n    valueAsString\n};\n\nexport {\n    property\n};\n"],"names":["notify","text","message","log","createEntry","libraryName","libByName","create","addAttribute","e","attr","property","set","field","link","addType","object","prototype","basedOn","length","fromPrototype","attributes","setPrototype","forEach","x","displayName","pattern","properties","linksFrom","replacer","_","fieldName","filter","replace","type","value","newValue","propertyType","undefined","stringConverter","multiLine","singleLine","hasConverter","key","Object","keys","includes","valueAsString","fromEntry","freeze"],"mappings":";;IAMA,SAASA,OAAOC;QACZC,QAAQD;QACRE,IAAIF;AACR;IAEA,SAASG,YAAYC;QACjB,OAAOC,UACHD,aACFE,OAAO,CAAA;AACb;ICVA,SAASC,aAAaC,GAAGC;QACrB,MAAMC,WAAWL,UAAU,YAAYC,OAAO,CAAA;QAC9CI,SAASC,IAAI,SAASF,KAAKG,MAAM;QACjCF,SAASC,IAAI,QAAQF,KAAKG,MAAM;QAChCF,SAASC,IAAI,SAASF,KAAKG,MAAM;QACjCF,SAASG,KAAK,UAAUL;AAC5B;IAEA,SAASM,QAAQC,QAAQC;QACrB,MAAMC,UAAUD,UAAUJ,MAAM;QAChCG,OAAOF,KAAK,QAAQG;QACpB,IAAIC,QAAQC,WAAW,GAAG;YACtBJ,QAAQC,QAAQE,QAAQ;AAC5B;AACJ;IAEA,SAASE,cAAcH;QACnB,MAAMI,aAAaJ,UAAUJ,MAAM;QACnC,MAAMG,SAASZ,YAAY;QAC3BW,QAAQC,QAAQC;QAChBK,aAAaN,QAAQC;QACrBI,WAAWE,QACNC,KAAMhB,aAAaQ,QAAQQ;QAGhC,OAAOR;AACX;IAEA,SAASM,aAAaN,QAAQC;QAC1BD,OAAOJ,IAAI,aAAa,EAACK;AAC7B;IC9BA,MAAMV,SAAS;QACXa;;ICNJ,SAASK,YAAYhB;QACjB,MAAMiB,UAAUjB,EAAEI,MAAM;QACxB,MAAMc,aAAalB,EAAEmB,UAAU,YAAY;QAE3C,SAASC,SAASC,GAAGC;YACjB,MAAMpB,WAAWgB,WAAWK,OACvBR,KAAMA,EAAEX,MAAM,aAAakB,WAC9B;YACF,OAAOpB,SAASE,MAAM;AAC1B;QAEA,OAAOa,QAAQO,QACX,kBACAJ;AAER;ICTK,MAACb,SAAS;QACXS;QACAlB;;ICLJ,SAAS2B,KAAKzB;QACV,OAAOA,EAAEI,MAAM;AACnB;ICAA,SAASsB,MAAM1B,GAAG2B;QACd,MAAMC,eAAeH,KAAKzB;QAC1B,IAAI2B,aAAaE,WAAW;YACxB7B,EAAEG,IAAIyB,cAAcD;AACxB;QACA,OAAO3B,EAAEI,MACLwB;AAER;ICPA,MAAME,kBAAkB;QACpBC,WAAWL;QACXM,YAAYN;;IAGhB,SAASO,aAAaC;QAClB,OAAOC,OAAOC,KACVN,iBACFO,SAASH;AACf;IAEA,SAASI,cAActC;QACnB,MAAM4B,eAAeH,KAAKzB;QAE1B,OACIiC,aAAaL,gBACXE,gBAAgBF,cAAc5B,KAC9B4B;AAEV;IClBA,SAASW,UAAUvC;QACf,MAAME,WAAW;YACbuB,MAAM,MAAMA,KAAKzB;YACjB0B,OAAQC,YAAaD,MAAM1B,GAAG2B;YAC9BW,eAAe,MAAMA,cAActC;;QAGvC,OAAOmC,OAAOK,OAAO;YACjBtC;;AAER;ICTK,MAACA,WAAW;QACbqC;QACAd;QACAC;QACAY;;;;;;"}