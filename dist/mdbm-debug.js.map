{"version":3,"file":"mdbm-debug.js","sources":["../src/library/checkAccess.js","../src/type/entries.js","../src/type/find.js","../src/type/exists.js","../src/type/isMissing.js","../src/type/messages.js","../src/type/check.js","../src/type/addType.js","../src/type/onCreate.js","../src/type/create.js","../src/type/emptyIds.js","../src/type/index.js","../src/library/onOpen.js","../src/library/index.js","../src/common/json.js","../src/object/typeName.js","../src/object/ids.js","../src/object/onCreate.js","../src/object/create.js","../src/object/index.js"],"sourcesContent":["/*jslint beta*/\n/*global\n    libByName\n*/\n\nfunction checkAccess() {\n    libByName(\"Object\");\n    libByName(\"mdbm.Type\");\n}\n\nexport {\n    checkAccess\n};\n","/*jslint beta*/\n/*global\n    libByName\n*/\n\nfunction entries() {\n    return libByName(\"mdbm.Type\").entries();\n}\n\nexport {\n    entries\n};\n","/*jslint beta*/\n/*global\n    libByName\n*/\n\nimport {entries} from \"./entries\";\n\nfunction find(typeName) {\n    return entries().find(\n        (e) => e.field(\"Name\") === typeName\n    );\n}\n\nexport {\n    find\n};\n","/*jslint beta*/\n/*global*/\n\nimport {find} from \"./find\";\n\nfunction exists(typeName) {\n    return find(typeName) !== undefined;\n}\n\nexport {\n    exists\n};\n","/*jslint beta*/\n/*global*/\n\nimport {exists} from \"./exists\";\n\nfunction isMissing(name) {\n    return !exists(name);\n}\n\nexport {\n    isMissing\n};\n","/*jslint beta*/\n/*global*/\n\nconst messages = {\n    alreadyExists,\n    isMissing\n};\n\nfunction alreadyExists(x) {\n    return \"Type '\" + x + \"' does already exist!\";\n}\n\nfunction isMissing(x) {\n    return \"Type '\" + x + \"' does not exist!\";\n}\n\nexport {\n    messages\n};\n","/*jslint beta*/\n/*global*/\n\nimport {isMissing} from \"./isMissing\";\nimport {messages} from \"./messages\";\n\nfunction check(typeName) {\n    if (isMissing(typeName)) {\n        throw messages.isMissing(typeName);\n    }\n}\n\nexport {\n    check\n};\n","/*jslint beta*/\n/*global*/\n\nimport {find} from \"./find\";\n\nfunction addType(typeEntry, typeName) {\n    const hasTypes = typeEntry.field(\"hasTypes\");\n    const hasTypeNames = hasTypes.map(\n        (e) => e.field(\"Name\")\n    );\n    if (!hasTypeNames.includes(typeName)) {\n        typeEntry.link(\n            \"hasTypes\",\n            find(typeName)\n        );\n    }\n}\n\nexport {\n    addType\n};\n","/*jslint beta*/\n/*global*/\n\nimport {addType} from \"./addType\";\nimport {find} from \"./find\";\n\nconst onCreate = {\n    open,\npost\n};\n\nfunction open(e) {\n    e.set(\n        \"hasTypes\",\n        find(\"Object\")\n    );\n}\n\nfunction post(e) {\n    addType(e, \"Object\");\n    addType(e, e.field(\"Name\"));\n    return e;\n}\n\nexport {\n    onCreate\n};\n","/*jslint beta*/\n/*global\n    libByName\n*/\n\nimport {exists} from \"./exists\";\nimport {messages} from \"./messages\";\nimport {onCreate} from \"./onCreate\";\n\nfunction create(typeName, baseType) {\n    if (exists(typeName)) {\n        throw messages.existsAlready(typeName);\n    }\n    return createType(typeName, baseType);\n}\n\nfunction createType(typeName, baseType) {\n    const typeEntry = libByName(\"mdbm.Type\").create({});\n    typeEntry.set(\"Name\", typeName);\n    if (baseType === undefined) {\n        onCreate.open(typeEntry);\n    } else {\n        typeEntry.set(\n            \"hasTypes\",\n            baseType.field(\"hasTypes\")\n        );\n    }\n    onCreate.post(typeEntry);\n    return typeEntry;\n}\n\nexport {\n    create\n};\n","/*jslint beta*/\n/*global*/\n\nimport {find} from \"./find\";\n\nfunction emptyIds(typeName) {\n    const typeEntry = find(typeName);\n    const types = typeEntry.field(\"hasTypes\");\n    const typeNames = types.map(\n        (x) => x.field(\"Name\")\n    );\n    const ids = Object.create(null);\n    typeNames.forEach(\n        (x) => ids[x] = null\n    );\n    return ids;\n}\n\nexport {\n    emptyIds\n};\n","/*jslint beta*/\n/*global*/\n\nimport {check} from \"./check\";\nimport {create} from \"./create\";\nimport {entries} from \"./entries\";\nimport {exists} from \"./exists\";\nimport {find} from \"./find\";\nimport {emptyIds} from \"./emptyIds\";\nimport {isMissing} from \"./isMissing\";\nimport {messages} from \"./messages.js\";\nimport {onCreate} from \"./onCreate.js\";\n\nconst type = {\n    check,\n    create,\n    emptyIds,\n    isMissing,\n    messages,\n    onCreate\n};\n\nexport {\n    type\n};\n","/*jslint beta*/\n/*global\n    message\n*/\n\nimport {checkAccess} from \"./checkAccess\";\nimport {type} from \"@type\";\n\nconst onOpen = {\n    post\n};\n\nfunction post(library) {\n    checkAccess();\n    if (type.isMissing(library.title)) {\n        message(\"Type '\" + library.title + \"' is not defined!\");\n    }\n}\n\nexport {\n    onOpen\n};\n","/*jslint beta*/\n/*global*/\n\nimport {onOpen} from \"./onOpen\";\n\nconst library = {\n    onOpen\n};\n\nexport {\n    library\n};\n","/*jslint beta*/\n/*global*/\n\nconst json = {\n    parse,\n    stringify\n};\n\nfunction parse(jsonString) {\n    return JSON.parse(jsonString);\n}\n\nfunction stringify(object) {\n    return JSON.stringify(object, null, 2);\n}\n\nexport {\n    json\n};\n","/*jslint beta*/\n/*global*/\n\nfunction typeName(e) {\n    return e.field(\"mdbm.Type\");\n}\n\nexport {\n  typeName\n};\n","/*jslint beta*/\n/*global*/\n\nimport {json} from \"@common/json\";\nimport {type} from \"@type\";\nimport {typeName} from \"./typeName\";\n\nconst ids = {\n    get,\n    getAll,\n    set,\n    setAll,\n    setEmpty,\n    setSelf\n};\n\nfunction get(e, typeName) {\n    return getAll(e)[typeName];\n}\n\nfunction getAll(e) {\n    return json.parse(\n        e.field(\"mdbm.Ids\")\n    );\n}\n\nfunction setEmpty(e) {\n    const ids = type.emptyIds(typeName(e));\n    setAll(e, ids);\n}\n\nfunction setAll(e, ids) {\n    e.set(\n        \"mdbm.Ids\",\n        json.stringify(ids)\n    );\n}\n\nfunction setSelf(e) {\n    set(e, typeName(e), e.id);\n}\n\nfunction set(e, typeName, value) {\n    const ids = getAll(e);\n    ids[typeName] = value;\n    setAll(ids);\n}\n\nexport {\n    ids\n};\n","/*jslint beta*/\n/*global\n    cancel\n    lib\n*/\n\nimport {type} from \"@type\";\nimport {ids} from \"./ids\";\n\nconst onCreate = {\n    open,\n    post\n};\n\nfunction open(e, activeLibrary) {\n    const libraryName = activeLibrary.title;\n    if (type.isMissing(libraryName)) {\n        activeLibrary.show();\n        throw type.messages.isMissing(libraryName);\n    }\n    e.set(\"mdbm.Type\", libraryName);\n    ids.setEmpty(e);\n}\n\nfunction post(e) {\n    ids.setSelf(e);\n}\n\nexport {\n    onCreate\n};\n","/*jslint beta*/\n/*global*/\n\nimport {onCreate} from \"./onCreate\";\n\nfunction create(typeName) {\n    const object = libByName(typeName).create({});\n    onCreate.open(\n        object,\n        libByName(typeName)\n    );\n    onCreate.post(object);\n    object.show();\n}\n\nexport {\n    create\n};\n","/*jslint beta*/\n/*global*/\n\nimport {create} from \"./create\";\nimport {onCreate} from \"./onCreate\";\n\nconst object = {\n    create,\n    onCreate\n};\n\nexport {\n    object\n};\n"],"names":["checkAccess","libByName","entries","find","typeName","e","field","exists","undefined","isMissing","name","messages","alreadyExists","x","check","addType","typeEntry","hasTypes","hasTypeNames","map","includes","link","onCreate","open","post","set","create","baseType","existsAlready","createType","emptyIds","types","typeNames","ids","Object","forEach","type","onOpen","library","title","message","json","parse","stringify","jsonString","JSON","object","get","getAll","setAll","setEmpty","setSelf","id","value","activeLibrary","libraryName","show"],"mappings":"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"}